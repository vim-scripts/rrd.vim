*rrd.txt*      For Vim version 6.1.  Last change: 2002 Oct 27


		RRD PLUGIN REFERENCE by Colin Keith

==============================================================================
1. Plugin information						*rrd-info*

The RRD.vim package is a vim module that acts as a frontend to Tobi Oetiker's
excellent RRDTool program. RRDTool and documenation can be found on the URL:

 http://www.rrdtool.org/

This module was created to give a simple frontend to the data in the RRDb's
so that I could remove spurious data from my graphs in an environment where
I could see and change the data in one place and not have to put in a lot of
time writing a Perl script. Fortunately Tobi supplies the tools to read and
write data into and out of his databases via the *dump* and *restore* commands
of rrdtool.

When installed the module catches the opening of a .rrd (binary data) file and
dumps it into XML which it then reads in and syntax highlights. If you have
folding enabled then the datasets, round robin archives and databases are
folded to simplfy the view.

For future updates see |rrd-todo|.

				*RRDRead* *RRDWrite* *rrd-read* *rrd-write*

Reading RRD files.
------------------

 When opening a .rrd file Vim opens it in binary mode enabled, it then filters
the data through the "rrdtool dump" command -- which outputs the data in XML
-- and into a temp file.

Writing RRD files.
------------------

 On writing the file back to disk the contents are filtered through "rrdtool
restore" which imports the data from the XML generated by "rrdtool dump" and
writes it out as an RRDb. As the XML file you're editing is a temp file it
doesn't matter if you screw up the contents, you won't write over the actual
.rrd file.


==============================================================================
2. RRD Commands						*rrd-commands*

This plugin provides the following commands:

									*AddDS*

 |AddDS| Adds a new dataset to the RRDb currently being edited. It adds the
         new dataset after the last DS currently defined and then adds the
         corresponding data to all of the database fields. As there is no way
         to determine in advance what data should be stored in the datapoint
         values, all of the newly created fields are created as NaN entries.

         When you create the new DS you need to specifiy the DS name ({DSN}).
         If you wish, you can specify the Data Source Type ({DST}) on the
         command line. If you do not, it defaults to {GAUGE}. Likewise you can
         also specify the heartbeat and min / max for this DS. Everything apart
         from the dataset name is optional. I.e. >

              AddDS <name> [DST, [MinHB, [Min, [Max]]]]
<
         As per rrdtool the DST must be one of >

              GAUGE, COUNTER, DERIVE, ABSOLUTE
<
         The heartbeat must be an integer. No checking is performed on the
         other variables.

         NOTE: This command can take a while to run as it has to insert the
         new data as the last value in each row of each archive.


								*DeleteDS*

 |DeleteDS| Deletes a existing dataset from the RRDb currently being edited.
         It requires the name of the DS to be removed. It will then remove the
         dataset XML block and delete the corresponding data from the archive
         rows. It requires only one arguement, the name of the dataset. I.e. >

             DeleteDS sev
<
         Would delete the "sev" (severity) dataset from an (SNIPS/MRTG) RRD.

         NOTE: This command can be {very} slow due to the pattern matching
         used to remove the datapoint values in the archives. It will display
         a warning to this effect just before the deleting of the data begins.


==============================================================================
3. RRD Variables					*rrd-variables*

 |b:rrdtmpfile| This variable is created when a .rrd file is opened. It
                contains a filename generated by Vim. The XML is stored in
                this file. When you save the XML is imported back into the
                database.

==============================================================================
4. Todo								*rrd-todo*

 The rrd.vim modules are created to enable the editing of RRD's, but it is not
a fully functional frontend to RRDb's. This will change with the addition of
the following features. If you have other features you would like to see, mail
me with the details.


  * Dataset adding / removing
   -- Added as per v1.1
  * Addition of new archives
  * Manipulation of archive start/end dates


==============================================================================
5. Problems							*rrd-problems*

Contact the author:

 Colin Keith <vim at ckeith.clara.net>

Happy Vimming!

 vim:tw=78:ts=8:ft=help:norl:

